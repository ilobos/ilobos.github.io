{"title":"Mybatis Plus逻辑删除时自动填充时间","uid":"5a84c1282747741be433f8b364c5c86f","slug":"java/001-mybatis-plus-sql-injector","date":"2022-04-02T05:20:13.000Z","updated":"2022-04-02T16:17:08.279Z","comments":true,"path":"api/articles/java/001-mybatis-plus-sql-injector.json","keywords":null,"cover":"https://images.pexels.com/photos/290470/pexels-photo-290470.jpeg?auto=compress&cs=tinysrgb&dpr=3&h=750&w=1260","content":"<hr>\n<h5 id=\"1、背景\"><a href=\"#1、背景\" class=\"headerlink\" title=\"1、背景\"></a>1、背景</h5><p>开发规范里面要求有 delte_time 字段，但是baomidou的Mybatis plus里面没有这个字段；理论上也是不需要这个字段的，毕竟逻辑删除 与 update_time 配合起来就是 delte_time 的含义了；所以我们需要来研究一下 如何增加这个字段，并实现自动填充。</p>\n<h5 id=\"2、开发环境\"><a href=\"#2、开发环境\" class=\"headerlink\" title=\"2、开发环境\"></a>2、开发环境</h5><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">java -version\njava version &quot;1.8.0_212&quot;\nJava(TM) SE Runtime Environment (build 1.8.0_212-b10)\nJava HotSpot(TM) 64-Bit Server VM (build 25.212-b10, mixed mode)</code></pre>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">&lt;dependency&gt;\n    &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.2.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.6.6&lt;&#x2F;version&gt;\n    &lt;relativePath&#x2F;&gt;\n&lt;&#x2F;parent&gt;</code></pre>\n\n<h5 id=\"3、通用字段\"><a href=\"#3、通用字段\" class=\"headerlink\" title=\"3、通用字段\"></a>3、通用字段</h5><p>1、SQL脚本：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\">&#96;id&#96; bigint(32) unsigned NOT NULL AUTO_INCREMENT,\n&#96;create_time&#96; timestamp NULL DEFAULT NULL COMMENT &#39;创建时间&#39;,\n&#96;update_time&#96; timestamp NULL DEFAULT NULL COMMENT &#39;更新时间&#39;,\n&#96;delete_time&#96; timestamp NULL DEFAULT NULL COMMENT &#39;删除时间&#39;,\n&#96;is_deleted&#96; tinyint(4) unsigned NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;逻辑删除标识位&#39;,\n&#96;version&#96; int(11) unsigned NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;版本号&#39;,</code></pre>\n<p>2、对应的BaseModel.java</p>\n<pre class=\"language-Java\" data-language=\"Java\"><code class=\"language-Java\">@TableId(value &#x3D; &quot;id&quot;, type &#x3D; IdType.AUTO)\nprotected Long id;\n\n@TableField(value &#x3D; &quot;create_time&quot;, fill &#x3D; FieldFill.INSERT)\nprotected Date createTime;\n\n@TableField(value &#x3D; &quot;update_time&quot;, fill &#x3D; FieldFill.UPDATE)\nprotected Date updateTime;\n\n@TableField(value &#x3D; &quot;delete_time&quot;)\nprotected Date deleteTime;\n\n@TableLogic\n@TableField(value &#x3D; &quot;is_deleted&quot;)\nprotected Integer isDeleted;\n\n@Version\n@TableField(value &#x3D; &quot;version&quot;, fill &#x3D; FieldFill.UPDATE, update &#x3D; &quot;%s+1&quot;)\nprotected Integer version;</code></pre>\n<p>@TableId：主键字段</p>\n<p>@Version：版本号字段</p>\n<p>@TableLogic：逻辑删除字段</p>\n<p>FieldFill.UPDATE：当更新时填充</p>\n<p>FieldFill.INSERT：当插入时填充</p>\n<p>根据SQL脚本和BaseModel的相关字段，我们可以发现并没有对各个时间字段进行特殊处理，这里是有一个专门的【自动填充控制器】来操作的；</p>\n<h5 id=\"4、自定义填充控制器\"><a href=\"#4、自定义填充控制器\" class=\"headerlink\" title=\"4、自定义填充控制器\"></a>4、自定义填充控制器</h5><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MybatisPlusMetaObjectHandler implements MetaObjectHandler &#123;\n\n    @Override\n    public void insertFill(MetaObject metaObject) &#123;\n        Date now &#x3D; new Date();\n        &#x2F;&#x2F; 注意此处字段名称需要使用驼峰\n        Object createdAt &#x3D; this.getFieldValByName(&quot;createTime&quot;, metaObject);\n        if (null &#x3D;&#x3D; createdAt) &#123;\n            this.setFieldValByName(&quot;createTime&quot;, now, metaObject);\n        &#125;\n\n        Object updatedAt &#x3D; this.getFieldValByName(&quot;updateTime&quot;, metaObject);\n        if (null &#x3D;&#x3D; updatedAt) &#123;\n            this.setFieldValByName(&quot;updateTime&quot;, now, metaObject);\n        &#125;\n\n        Object version &#x3D; this.getFieldValByName(&quot;version&quot;, metaObject);\n        if (null &#x3D;&#x3D; version) &#123;\n            this.setFieldValByName(&quot;version&quot;, 0L, metaObject);\n        &#125;\n    &#125;\n\n    @Override\n    public void updateFill(MetaObject metaObject) &#123;\n\n        Object updatedAt &#x3D; this.getFieldValByName(&quot;updateTime&quot;, metaObject);\n        if (null &#x3D;&#x3D; updatedAt) &#123;\n            this.setFieldValByName(&quot;updateTime&quot;, new Date(), metaObject);\n        &#125;\n\n        Object version &#x3D; this.getFieldValByName(&quot;version&quot;, metaObject);\n        if (null &#x3D;&#x3D; version) &#123;\n            this.setFieldValByName(&quot;version&quot;, 0L, metaObject);\n        &#125;\n    &#125;\n&#125;</code></pre>\n<p>到了这一步，逻辑删除时并不能对新增的 delete_time 字段设置当前的时间，还不符合我们的需求，所以我们需要改写一下SQL注入的逻辑；即：逻辑删除的时候，将 delete_time 设置为当前时间戳。</p>\n<h5 id=\"5、自定义SQL注入器\"><a href=\"#5、自定义SQL注入器\" class=\"headerlink\" title=\"5、自定义SQL注入器\"></a>5、自定义SQL注入器</h5><p>1、自定义逻辑删除，单个删除</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">public class LogicDeleteById extends AbstractMethod &#123;\n\n    &#x2F;**\n     * mapper 对应的方法名\n     *&#x2F;\n    private static final String MAPPER_METHOD &#x3D; &quot;logicDeleteById&quot;;\n\n    @Override\n    public MappedStatement injectMappedStatement(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo) &#123;\n        String sql;\n        SqlMethod sqlMethod &#x3D; SqlMethod.LOGIC_DELETE_BY_ID;\n        if (tableInfo.isLogicDelete()) &#123;\n            List&lt;TableFieldInfo&gt; fieldInfos &#x3D; tableInfo.getFieldList().stream()\n                    .filter(i -&gt; i.getFieldFill() &#x3D;&#x3D; FieldFill.UPDATE || i.getFieldFill() &#x3D;&#x3D; FieldFill.INSERT_UPDATE)\n                    .collect(toList());\n            if (CollectionUtils.isNotEmpty(fieldInfos)) &#123;\n                String sqlSet &#x3D; &quot;SET &quot; + fieldInfos.stream().map(i -&gt; i.getSqlSet(EMPTY)).collect(joining(EMPTY))\n                        + tableInfo.getLogicDeleteSql(false, true)\n                        + &quot;,delete_time &#x3D; NOW()&quot;;\n                sql &#x3D; String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlSet, tableInfo.getKeyColumn(),\n                        tableInfo.getKeyProperty(), tableInfo.getLogicDeleteSql(true, false));\n            &#125; else &#123;\n                sql &#x3D; String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlLogicSet(tableInfo),\n                        tableInfo.getKeyColumn(), tableInfo.getKeyProperty(),\n                        tableInfo.getLogicDeleteSql(true, false));\n            &#125;\n        &#125; else &#123;\n            sqlMethod &#x3D; SqlMethod.DELETE_BY_ID;\n            sql &#x3D; String.format(sqlMethod.getSql(), tableInfo.getTableName(), tableInfo.getKeyColumn(),\n                    tableInfo.getKeyProperty());\n        &#125;\n        SqlSource sqlSource &#x3D; languageDriver.createSqlSource(configuration, sql, modelClass);\n        return addUpdateMappedStatement(mapperClass, modelClass, MAPPER_METHOD, sqlSource);\n    &#125;\n&#125;</code></pre>\n<p>2、自定义批量逻辑删除</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">public class LogicDeleteBatch extends AbstractMethod &#123;\n\n    &#x2F;**\n     * mapper 对应的方法名\n     *&#x2F;\n    private static final String MAPPER_METHOD &#x3D; &quot;logicDeleteBatch&quot;;\n\n    @Override\n    public MappedStatement injectMappedStatement(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo) &#123;\n        String sql;\n        if (tableInfo.isLogicDelete()) &#123;\n            String logicDeleteSql &#x3D; &quot;&lt;script&gt;\\nUPDATE %s %s %s\\n&lt;&#x2F;script&gt;&quot;;\n            List&lt;TableFieldInfo&gt; fieldInfos &#x3D; tableInfo.getFieldList().stream()\n                    .filter(i -&gt; i.getFieldFill() &#x3D;&#x3D; FieldFill.UPDATE || i.getFieldFill() &#x3D;&#x3D; FieldFill.INSERT_UPDATE)\n                    .collect(toList());\n            if (CollectionUtils.isNotEmpty(fieldInfos)) &#123;\n                String sqlSet &#x3D; &quot;SET &quot; + fieldInfos.stream().map(i -&gt; i.getSqlSet(ENTITY_DOT)).collect(joining(EMPTY))\n                        + tableInfo.getLogicDeleteSql(false, true)\n                        + &quot;,delete_time &#x3D; NOW()&quot;;\n                sql &#x3D; String.format(logicDeleteSql, tableInfo.getTableName(), sqlSet,\n                        sqlWhereEntityWrapper(true, tableInfo));\n            &#125; else &#123;\n                sql &#x3D; String.format(logicDeleteSql, tableInfo.getTableName(), sqlLogicSet(tableInfo),\n                        sqlWhereEntityWrapper(true, tableInfo));\n            &#125;\n            SqlSource sqlSource &#x3D; languageDriver.createSqlSource(configuration, sql, modelClass);\n            return this.addUpdateMappedStatement(mapperClass, modelClass, MAPPER_METHOD, sqlSource);\n        &#125; else &#123;\n            String deleteSql &#x3D; &quot;&lt;script&gt;\\nDELETE FROM %s %s\\n&lt;&#x2F;script&gt;&quot;;\n            sql &#x3D; String.format(deleteSql, tableInfo.getTableName(), sqlWhereEntityWrapper(true, tableInfo));\n            SqlSource sqlSource &#x3D; languageDriver.createSqlSource(configuration, sql, modelClass);\n            return this.addDeleteMappedStatement(mapperClass, MAPPER_METHOD, sqlSource);\n        &#125;\n    &#125;\n&#125;</code></pre>\n<p>3、自定义SQL注入器</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">public class MybatisPlusSqlInjector extends DefaultSqlInjector &#123;\n\n    @Override\n    public List&lt;AbstractMethod&gt; getMethodList(Class&lt;?&gt; mapperClass) &#123;\n        &#x2F;&#x2F; 拿到父类的getMethodList方法\n        List&lt;AbstractMethod&gt; methodList &#x3D; super.getMethodList(mapperClass);\n\n        &#x2F;&#x2F; 根据id删除并自动填充 LogicDeleteById\n        methodList.add(new LogicDeleteById());\n\n        methodList.add(new LogicDeleteBatch());\n        return methodList;\n    &#125;\n&#125;</code></pre>\n<p>4、在baseMapper里面声明这两个方法，使用过程中就可以直接在其他mapper中调用这两个自定义方法了：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">public interface IBaseMapper&lt;T&gt; extends BaseMapper&lt;T&gt; &#123;\n    &#x2F;**\n     * 逻辑删除\n     *\n     * @param entity\n     * @return\n     *&#x2F;\n    int logicDeleteById(T entity);\n\n    &#x2F;**\n     * 批量逻辑删除\n     *\n     * @param entity\n     * @param wrapper\n     * @return\n     *&#x2F;\n    int logicDeleteBatch(@Param(Constants.ENTITY) T entity, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; wrapper);\n&#125;</code></pre>\n<h5 id=\"6、集成到service层\"><a href=\"#6、集成到service层\" class=\"headerlink\" title=\"6、集成到service层\"></a>6、集成到service层</h5><p>1、接口</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">public interface IBaseService&lt;T&gt; extends IService&lt;T&gt; &#123;\n    &#x2F;**\n     * 逻辑删除\n     *\n     * @param entity\n     * @return\n     *&#x2F;\n    int logicDeleteById(T entity);\n\n    &#x2F;**\n     * 批量逻辑删除\n     *\n     * @param entity\n     * @param wrapper\n     * @return\n     *&#x2F;\n    int logicDeleteBatch(T entity, Wrapper&lt;T&gt; wrapper);\n&#125;</code></pre>\n<p>2、实现类，记得要继承ServiceImpl&lt;M, T&gt;，不然要写很多相同的代码</p>\n<pre class=\"language-java\" data-language=\"java\"><div class=\"caption\"><span>IBaseServiceImpl.java</span></div><code class=\"language-java\">public class IBaseServiceImpl&lt;M extends IBaseMapper&lt;T&gt;, T&gt; extends ServiceImpl&lt;M, T&gt; implements IBaseService&lt;T&gt; &#123;\n\n    @Autowired\n    protected M baseMapper;\n\n    @Override\n    public M getBaseMapper() &#123;\n        return baseMapper;\n    &#125;\n\n    @Override\n    public int logicDeleteById(T entity) &#123;\n        return baseMapper.logicDeleteById(entity);\n    &#125;\n\n    @Override\n    public int logicDeleteBatch(T entity, Wrapper&lt;T&gt; wrapper) &#123;\n        return baseMapper.logicDeleteBatch(entity, wrapper);\n    &#125;\n\n&#125;</code></pre>\n<p>3、至此，就可以在service层进行直接调用了，自从用了mybatis plus，就远离了mapper.xml</p>\n<hr>\n","text":" 1、背景开发规范里面要求有 delte_time 字段，但是baomidou的Mybatis plus里面没有这个字段；理论上也是不需要这个字段的，毕竟逻辑删除 与 update_time 配合起来就是 delte_time 的含义了；所以我们需要来研究一下 如何增加这个字段，...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Java","slug":"Java","count":1,"path":"api/categories/Java.json"}],"tags":[{"name":"Mybatis Plus","slug":"Mybatis-Plus","count":1,"path":"api/tags/Mybatis-Plus.json"},{"name":"SQL","slug":"SQL","count":1,"path":"api/tags/SQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">1、背景</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">2、开发环境</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3%E3%80%81%E9%80%9A%E7%94%A8%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">3、通用字段</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A1%AB%E5%85%85%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">4、自定义填充控制器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89SQL%E6%B3%A8%E5%85%A5%E5%99%A8\"><span class=\"toc-text\">5、自定义SQL注入器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6%E3%80%81%E9%9B%86%E6%88%90%E5%88%B0service%E5%B1%82\"><span class=\"toc-text\">6、集成到service层</span></a></li></ol>","author":{"name":"ilobos","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"直面挑战 躬身入局","socials":{"github":"https://github.com/ilobos/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/ilobos/"}}}},"mapped":true,"prev_post":{"title":"vue项目中集成electron开发跨平台桌面应用","uid":"ea7229753d79611e87c6a6be3da79074","slug":"electron/004-electron-vue","date":"2022-04-11T07:20:13.000Z","updated":"2022-04-11T08:12:08.366Z","comments":true,"path":"api/articles/electron/004-electron-vue.json","keywords":null,"cover":"https://images.pexels.com/photos/290470/pexels-photo-290470.jpeg?auto=compress&cs=tinysrgb&dpr=3&h=750&w=1260","text":" 说明本文将Vue引入Electron项目的方案是：Vue CLI Plugin Electron Builder，也有其他方式的，可自行谷歌。 1、升级npm、cnpmcnpm install -g npm npm install -g cnpm 2、创建vue项目npm i ...","link":"","photos":[],"count_time":{"symbolsCount":432,"symbolsTime":"1 mins."},"categories":[{"name":"Electron","slug":"Electron","count":8,"path":"api/categories/Electron.json"}],"tags":[{"name":"vue","slug":"vue","count":3,"path":"api/tags/vue.json"}],"author":{"name":"ilobos","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"直面挑战 躬身入局","socials":{"github":"https://github.com/ilobos/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/ilobos/"}}}}},"next_post":{"title":"Windows移除快捷方式的小图标","uid":"15d0f173b74c265bd5670b5b383beb4a","slug":"win/001-remove-shortcut-flag","date":"2022-03-30T01:20:13.000Z","updated":"2022-03-30T01:57:44.194Z","comments":true,"path":"api/articles/win/001-remove-shortcut-flag.json","keywords":null,"cover":"https://images.pexels.com/photos/290470/pexels-photo-290470.jpeg?auto=compress&cs=tinysrgb&dpr=3&h=750&w=1260","text":" 1、打开注册表a、Windows图标 + R b、输入 regedit 打开注册表编辑程序 2、删除IsShortcuta、依次展开 HKEY_CLASSES_ROOT\\lnkfile ， 也可以直接搜索 b、找到并右键删除 IsShortcut 3、重启资源管理器a、在任务栏...","link":"","photos":[],"count_time":{"symbolsCount":253,"symbolsTime":"1 mins."},"categories":[{"name":"Windows","slug":"Windows","count":6,"path":"api/categories/Windows.json"}],"tags":[{"name":"shortcut","slug":"shortcut","count":1,"path":"api/tags/shortcut.json"}],"author":{"name":"ilobos","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"直面挑战 躬身入局","socials":{"github":"https://github.com/ilobos/","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/ilobos/"}}}}}}