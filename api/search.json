[{"id":"e45834e36543122a7568170b7c960314","title":"electron选择文件夹","content":"\n1、背景使用Vue2搭建的项目，有时候需要选择文件夹，搜索了很多发现并不支持。所以打算自己写一个；这种写法在目录中有文件的时候，是可以正常使用的；但如果是一个空目录，则会发生空指针的BUG，此处记录如何在electron中选择目录。\n2、electron版本的解决方案","slug":"electron/009-el-select-folder","date":"2022-12-28T08:20:13.000Z","categories_index":"Vue","tags_index":"Folder","author_index":"ilobos"},{"id":"db4284cb41a495b28f27a26d082d778e","title":"Vue2选择文件夹","content":"\n1、背景使用Vue2搭建的项目，有时候需要选择文件夹，搜索了很多发现并不支持。所以打算自己写一个；这种写法在目录中有文件的时候，是可以正常使用的；但如果是一个空目录，则会发生空指针的BUG，导致无法达到预期效果。此时可以借助第三方解决方案，参考此处可以查看如何在electron中选择目录。\n2、Vue版本的解决方案","slug":"vue/004-vue-select-folder","date":"2022-12-28T06:20:13.000Z","categories_index":"Vue","tags_index":"Folder","author_index":"ilobos"},{"id":"3afad2911964fe45a31d72578fdd76ee","title":"在使用git的过程中 碰到无法pull的问题 Connection closed by remote host","content":"\n说明在使用git的过程中，偶尔会碰到这个错误，kex_exchange_identification: Connection closed by remote host；\ngit pull\nkex_exchange_identification: Connection closed by remote hostfatal: Could not read from remote repository.\nPlease make sure you have the correct access rightsand the repository exists.\n解决方案需要找到用户路径下的.ssh目录，删除：known_hosts、known_hosts.old\n一般在这里，\nWindows：C:\\Users\\your username\\.ssh\n\nMacOSX：&#x2F;Users&#x2F;your username&#x2F;.ssh OR ~&#x2F;.ssh\n\nLinux：&#x2F;home&#x2F;your username&#x2F;.ssh OR ~&#x2F;.ssh\n\n删除后，再次执行 git 的相关命令就OK了～\n","slug":"share/004-git-pull-error","date":"2022-12-28T06:20:13.000Z","categories_index":"GIT","tags_index":"Rebase","author_index":"ilobos"},{"id":"c1b2ae1279983b800ac2972629308433","title":"electron项目中使用serialport模块，无需手动编译","content":"\n0、背景由于serialport是一个原生模块，所以electron在打包之后，无法找到这个模块，常规方式是编译该模块再重新打败，但是即便如此也有一定概率是失败的。前往electron官网可查看如何编译原生模块。\n解决：Uncaught Error: Cannot find module ‘serialport’\n1、版本由于前端的版本实在太多了，所以匹配下 大版本号 不对的，可以直接不用看了；electron 22 + serialport 10，无需重新编译，即可用于Windows、macOS、Linux。\nnode -v\n16.16.0\n&quot;node_modules&#x2F;electron-rebuild&quot;: &quot;3.2.9&quot;\n&quot;node_modules&#x2F;electron-builder&quot;: &quot;22.14.13&quot;\n&quot;node_modules&#x2F;electron&quot;: &quot;22.0.0&quot;\n&quot;node_modules&#x2F;serialport&quot;: &quot;10.5.0&quot;\n&quot;node_modules&#x2F;@serialport&#x2F;bindings-cpp&quot;: &quot;10.8.0&quot;\n\n2、Scripts&quot;scripts&quot;: &#123;\n  &quot;serve&quot;: &quot;vue-cli-service electron:serve&quot;,\n  &quot;build&quot;: &quot;vue-cli-service electron:build&quot;,\n  &quot;postinstall&quot;: &quot;electron-builder install-app-deps&quot;,\n  &quot;postuninstall&quot;: &quot;electron-builder install-app-deps&quot;\n&#125;\n\n3、安装electron-rebuildnpm install electron-rebuild -D\n\n4、(重要) 配置vue.config.js核心就是将 serialport 添加到“vue.config.js”文件中的externals\npluginOptions: &#123;\n   electronBuilder: &#123; \n      externals: [&#39;serialport&#39;],       \n    &#125;    \n&#125;\n\n5、(重要) 配置allowRendererProcessReuse找到主进程的入口文件：background.js\napp.allowRendererProcessReuse &#x3D; false;","slug":"electron/008-eleltron-serialport","date":"2022-12-23T06:30:13.000Z","categories_index":"Electron","tags_index":"electron,serialport","author_index":"ilobos"},{"id":"1177a04a594e4ccefe1ee084cbb23114","title":"electron项目在mac上无法复制","content":"\n1、背景在mac开发中，electron在主进程中注释掉自带menu后，自己新写的menu，启动后发现无法粘贴、复制；\n2、分析因为快捷键被禁用，所以无法使用Cmd + C、Cmd + X、Cmd + P等；此时我们可以按需添加快捷键，恢复想要的功能。\nif (process.platform &#x3D;&#x3D;&#x3D; &#39;darwin&#39;) &#123;\n  template.unshift(&#123;\n    label: &#39;YourApplicationName&#39;,\n    submenu: [\n      &#123; role: &#39;undo&#39; &#125;,\n      &#123; role: &#39;redo&#39; &#125;,\n      &#123; type: &#39;separator&#39; &#125;,\n      &#123; role: &#39;cut&#39; &#125;,\n      &#123; role: &#39;copy&#39; &#125;,\n      &#123; role: &#39;paste&#39; &#125;,\n      &#123; role: &#39;delete&#39; &#125;,\n      &#123; role: &#39;selectall&#39; &#125;\n      &#123; role: &#39;quit&#39; &#125;\n    ]\n  &#125;);\n&#125;","slug":"electron/007-eleltron-mac-cannot-cp","date":"2022-12-23T05:20:13.000Z","categories_index":"Electron","tags_index":"electron,mac","author_index":"ilobos"},{"id":"438947d17d2a5b6f09dbb2a122dce3f4","title":"vue-cli5打包后element-ui的样式丢失","content":"\n1、背景使用vue-cli5创建vue2项目，使用了element-ui，在使用electron-builder打包build之后，发现element-ui的样式丢失，找不到fonts目录。\n在网上搜索无果，大多数的解决方法都不是vue-cli5版本的，有build、utils、webpack的一些的配置，那都不是本文所论述的范围，如果你的版本不是vue-cli5，那么可以关掉这个页面了，不用浪费时间。\n2、版本node -v\n16.16.0\n&quot;node_modules&#x2F;vue&quot;: &quot;2.7.14&quot;\n&quot;node_modules&#x2F;@vue&#x2F;cli-service&quot;: &quot;5.0.8&quot;\n&quot;node_modules&#x2F;element-ui&quot;: &quot;2.15.12&quot;\n&quot;node_modules&#x2F;electron-builder&quot;: &quot;22.14.13&quot;\n&quot;node_modules&#x2F;electron&quot;: &quot;22.0.0&quot;\n\n3、Scripts&quot;scripts&quot;: &#123;\n  &quot;serve&quot;: &quot;vue-cli-service electron:serve&quot;,\n  &quot;build&quot;: &quot;vue-cli-service electron:build&quot;,\n  &quot;postinstall&quot;: &quot;electron-builder install-app-deps&quot;,\n  &quot;postuninstall&quot;: &quot;electron-builder install-app-deps&quot;\n&#125;\n\n4、现象启动使用：npm run serve 一切正常\nnpm run serve\n打包使用：npm run build 字体、样式丢失\nnpm run build\n\n5、解决方案找到 vue.config.js (vue-cli5只有这个，没有别的)在pluginOptions.electronBuilder 中 添加 customFileProtocol: “.&#x2F;“\npluginOptions: &#123;\n    electronBuilder: &#123;\n        customFileProtocol: &quot;.&#x2F;&quot;\n    &#125;\n&#125;\n\n“.&#x2F;“与 assetsDir 相同，参考下面的配置：\nconst &#123; defineConfig &#125; &#x3D; require(&#39;@vue&#x2F;cli-service&#39;)\n\nmodule.exports &#x3D; defineConfig(&#123;\n    transpileDependencies: true,\n    publicPath: &#39;.&#x2F;&#39;,\n    assetsDir: &quot;.&#x2F;&quot;,\n    pluginOptions: &#123;\n        electronBuilder: &#123;\n            customFileProtocol: &quot;.&#x2F;&quot;\n        &#125;\n    &#125;\n&#125;)\n\n6、ALL DONE\n","slug":"vue/002-vue-cli5-elementui-fonts","date":"2022-12-22T03:20:13.000Z","categories_index":"Vue","tags_index":"vue-cli5,element-ui,electron-builder","author_index":"ilobos"},{"id":"77cf03d322bc183735b2daa0ceb4d64b","title":"GitTree保持一条线","content":"\n说明有些场景，或者强迫症患者，希望Tree是一条直线，特别是在多仓库、多分支的情况下，一条线看着确实相对舒服。\n需求我们在dev分支开发好代码之后，期望合并到test分支，以下步骤可以让我们保持一条线，并且保障commit不会多次出现。\n1、Rebase在dev分支执行rebase命令\ngit rebase test\n\n2、Checkoutgit checkout test\n\n3、Merge将dev的代码进行合并\ngit merge dev\n\n4、Pushgit push test\n\n完成一条线啦～\n","slug":"share/003-git-rebase","date":"2022-06-05T09:20:13.000Z","categories_index":"GIT","tags_index":"Rebase","author_index":"ilobos"},{"id":"de6e63237e5b53276002403454a7e954","title":"Vue3跨页面监听缓存数据","content":"\n1、背景当我们期望页面上的某些按钮的状态随着缓存数据的变化而变化，但是这个缓存数据的变化可能是来自其他页面，我们就需要通过创建自定义监听事件来完成该项工作，即：B页面的按钮状态随A页面的缓存变化而变化。\n2、创建监听事件改造main.js，在main.js文件中，加入代码，结构如下，其中如何创建一个StorageEvent事件，需要根据实际情况进行改造，需要适配自己的vue版本即可，本文使用的是：vm.config.globalProperties.$addStorageEvent；\n\n  \n\n\n&#x2F;&#x2F; 创建一个StorageEvent事件\nvm.config.globalProperties.$addStorageEvent &#x3D; function(key, data) &#123;\n    var newStorageEvent &#x3D; document.createEvent(&#39;StorageEvent&#39;);\n    const storage &#x3D; &#123;\n        setItem: function(k, val) &#123;\n            localStorage.setItem(k, val);\n            &#x2F;&#x2F; 初始化创建的事件\n            newStorageEvent.initStorageEvent(&#39;setItem&#39;, false, false, k, null, val, null, null);\n            &#x2F;&#x2F; 派发对象\n            window.dispatchEvent(newStorageEvent);\n        &#125;\n    &#125;\n    return storage.setItem(key, data);\n&#125;\n\n3、触发事件在期望监听的缓存参数，设定值的时候通过以下方式调用：\nthis.$addStorageEvent(&quot;some-key&quot;, &quot;some-value&quot;);\n\n4、监听事件在mounted中添加监听事件，\nmounted() &#123;\n  &#x2F;&#x2F; 监听缓存中指定key的值变化\n  window.addEventListener(&quot;setItem&quot;, this.hello);\n&#125;,\n在method中添加对应的方法，进行业务处理，\n&#x2F;&#x2F; 根据指定key的值变化进行对应的业务操作\nhello(e) &#123;\n  console.log(&quot;hello , data is changed&quot;, e.key, e.newValue);\n  if(e.key &amp;&amp; e.key &#x3D;&#x3D; &#39;some-key&#39; &amp;&amp; e.newValue) &#123;\n    this.some_key &#x3D; e.newValue;\n  &#125;\n&#125;\n5、ALL DONE\n","slug":"vue/001-storage-event-listener","date":"2022-06-02T05:20:13.000Z","categories_index":"Vue3","tags_index":"Storage,Listener","author_index":"ilobos"},{"id":"5252c7317051d246dedef9f207f9d6dd","title":"INNO-SETUP使用指南","content":"0、安装INNO-SETUP点击下载INNO-SETUP，提取码：5f5g\n1、选择向导打开软件之后，使用向导模式\n\n  \n\n\n2、向导欢迎页直接下一步即可\n\n  \n\n\n3、填写应用信息按需填写程序名称等信息\n\n  \n\n\n4、配置文件夹信息此处无需额外配置，直接下一步即可\n\n  \n\n\n5、配置文件夹选择主执行程序，并且可以按需添加文件和文件夹，此处我们需要添加jre的目录，以便java程序能正确运行\n\n  \n\n\n6、关联文件（按需）此处无需额外配置，直接下一步即可\n\n  \n\n\n7、指定快捷方式此处无需额外配置，直接下一步即可\n\n  \n\n\n8、配置安装时的显示文档（按需）此处无需额外配置，直接下一步即可\n\n  \n\n\n9、选择安装模式此处推荐管理员模式安装\n\n  \n\n\n10、配置安装语言此处无需额外配置，直接下一步即可\n\n  \n\n\n11、输出目录指定输出目录和名称，按需配置图标和安装密码\n\n  \n\n\n12、预处理器此处无需额外配置，直接下一步即可\n\n  \n\n\n13、向导配置完成此处无需额外配置，直接下一步即可\n\n  \n\n\n14、不要立即执行此处无需立即执行\n\n  \n\n\n15、生成GUID（按需）如果可能，需要重新生成GUID（此向导文件可保存，后续可直接打开）；\n\n  \n\n\n16、编译打包\n  \n\n\n\n17、补充：中文路径如果我们需要对中文路径有一定要求，可以进行编码，增加[code]代码块即可\n[Code]\n\n&#x2F;&#x2F; 检查安装路径是否是英文\nfunction IsEnglishStr(file: String): Boolean;\nvar\n  value: Integer;\n  len: Integer;\n  i: Integer;\nbegin\n  Result :&#x3D; true;\n  len :&#x3D; length(file);\nfor i :&#x3D; 1 to len do\n  begin\n  &#x2F;&#x2F; 将字符转成ascii值\n  value :&#x3D; ord(file[i]);\n  &#x2F;&#x2F; 根据字符的ascii码值判断字符是否为中文\n  if (value &lt; 48)  or ((value &gt; 58) and (value &lt; 65))  or (value &#x3D; 91) or  ((value &gt; 92) and  (value &lt; 97)) or (value &gt; 122) then\n    begin\n      Result :&#x3D; false;\n    end;\n  end;\nend;\n\n&#x2F;&#x2F; 选择安装路径下一步按钮触发事件，返回 false 则不会跳到下一步\nfunction NextButtonClick(CurPageID:Integer):Boolean;\nbegin\n  Result :&#x3D; True;\n  if (CurPageID &#x3D; wpSelectDir) then\n    begin\n    if(IsEnglishStr(WizardDirValue) &#x3D; false) then\n      begin\n      Result :&#x3D; False;\n      MsgBox(&#39;当前安装路径错误，请重新选择，路径中不能包含英文和符号~&#39;, mbError, MB_OK);\n      end;\n    end;\nend;\n\n18、补充：icon如果我们需要变更icon图标，直接添加对用的说明即可\n[Icons]\nName: &quot;&#123;autoprograms&#125;\\&#123;#MyAppName&#125;&quot;; Filename: &quot;&#123;app&#125;\\&#123;#MyAppExeName&#125;&quot;; IconFilename: &quot;&#123;#IconName&#125;&quot;\nName: &quot;&#123;autodesktop&#125;\\&#123;#MyAppName&#125;&quot;; Filename: &quot;&#123;app&#125;\\&#123;#MyAppExeName&#125;&quot;; Tasks: desktopicon; IconFilename: &quot;&#123;#IconName&#125;&quot;\n\n19、补充：安装完成后运行脚本如果我们需要变更运行一些特定的脚本，在[Run]代码块中，进行操作即可。按需模仿。\n\n","slug":"win/006-inno-setup","date":"2022-05-20T14:21:13.000Z","categories_index":"Windows","tags_index":"INNO-SETUP","author_index":"ilobos"},{"id":"56e9d8374c41a3b81ae7a8a22e210dbc","title":"EXE4J使用指南","content":"1、安装EXE4J点击下载EXE4J，提取码：zq98，软件安装完成后，输入通用注册码：A-XVK258563F-1p4lv7mg7sav，否则打好的exe包在安装之后会有一个弹框提示。\n\n  \n\n\n2、打开软件打开软件之后，在欢迎页面直接点击下一步（Next）\n\n  \n\n\n3、选择模式选择JAR in EXE Mode\n\n  \n\n\n4、填写应用信息填写exe文件名称 和 输出目录\n\n  \n\n\n5、配置配置一些必要信息，如icon、运行模式等\n\n  \n\n\n6、日志（按需）按需配置日志输出目录\n\n  \n\n\n7、64位安装包输出64位安装包\n\n  \n\n\n8、配置Java启动命令添加启动参数，选择启动类\n\n  \n\n\n9、导入Jar包选择jar包\n\n  \n\n\n10、配置JRE版本如果有必要，我们将使用独立的jre，所以此处按照实际情况填写即可\n\n  \n\n\n11、引用JRE目录如果有必要，我们将使用独立的jre，让用户直接使用我们指定的jre环境，而无需额外配置；此处使用的是相对目录，相对于我们目标exe的输出目录而言的，届时，jar形成的exe文件依赖于该jre目录而运行；\n\n  \n\n\n12、打包至此，已全部设置完成，直接打包即可，exe将输出到指定目录。\n\n  \n\n---","slug":"win/005-exe4j","date":"2022-05-18T14:21:13.000Z","categories_index":"Windows","tags_index":"EXE4J","author_index":"ilobos"},{"id":"fc0cb0b05745b28c3b72909823a6a111","title":"Windows编写bat脚本开机自动执行","content":"1、创建一个.bat文件@echo off\n@echo Auto start success.\npause\n2、将该.bat文件放到指定位置有两种找到这个文件夹的方式:\n\n讲蛮力, 一层一层找到它, 路径是这样的:\n\n  \n\n\n直接在导航栏输入下列路径, 回车即可\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\n\n  \n\n\n3、重启电脑即可观察效果4、如需延时, 可结合上一篇文章\n","slug":"win/003-auto-start-bat","date":"2022-05-10T14:21:13.000Z","categories_index":"Windows","tags_index":"bat,autostart","author_index":"ilobos"},{"id":"c4a4922b9b31fb6458de74a6db2598b5","title":"Powershell打开文件夹","content":"1、创建一个.bat文件start C:\\ProgramData\\Microsoft\n2、补充: 在Mac中用open命令open .\n\n\n","slug":"win/004-powershell-open-file-folder","date":"2022-05-10T14:21:13.000Z","categories_index":"Windows","tags_index":"powershell","author_index":"ilobos"},{"id":"7dd1ea228a6152caad4a0d9f3ae97e8f","title":"Windows编写bat脚本延时执行","content":"1、创建一个.bat文件, 写入以下内容@echo off\n@echo Delay 10s, please hold on...\nping 127.0.0.1 -n 10 &gt;nul\n@echo Delay 10s success.\npause\n\n\n","slug":"win/002-delay-bat","date":"2022-05-10T14:20:13.000Z","categories_index":"Windows","tags_index":"bat,delay","author_index":"ilobos"},{"id":"dbea556f1972a6f34d2e4c91ff8feb77","title":"MacOS 安装 iNode Client 的事故与故事，提示【“libCoreUtils.dylib”将对您的电脑造成伤害】","content":"问题有些特定的时候，我们需要借助iNode客户端回到公司内网。但是Mac电脑会碰到一个问题：频繁提示【“libCoreUtils.dylib”将对您的电脑造成伤害。此文件下载于未知日期。】，iNode一直无法正常打开运行，影响工作。\n\n解决方法一：重装1、彻底卸载后去官网下载最新版本生成安装包后重新安装1.1、登录打开新华三官网，点击登录，用户名：yx800，密码：01230123。\n1.2、下载点击此处，选择对应的版本进行下载，建议下载最新版本，该安装包较大，主要是压缩包包含多个版本的客户端。\n\n  \n\n\n1.3、选择MacOS的版本进行解压打开压缩包后，进入到iNodeManager目录，iNodeManager，然后右键 -&gt; 显示包内容\n\n  \n\n\n1.4、依次选择【Contents -&gt; MacOS】，双击脚本进行安装注意：此处是对客户端进行初始化配置，最终生成的安装包才能在Mac上正常使用\n\n  \n\n\n1.5、高级设置在配置过程中，需要选择对应的协议，注意此处支持多个协议，默认只勾选且只展示了两个，注意-注意-注意-记得下划看看有无目标协议，比如SSL VPN协议在第三个。另外，在高级定制中可以预先配置vpn的网关地址及端口；添加完成后点击完成，选择生成定制的客户端安装程序即可。\n1.6、安装客户端软件安装包会输出到iNodeSetup文件夹，双击iNodeClient即可安装真正的客户端。\n\n  \n\n\n1.7、新建连接，点击下一步输入对应信息\n  \n\n\n1.8、点击对应的连接即可完成上网\n  \n\n\n\n方法二：关闭SIP2、该问题是Mac电脑的“系统完整性保护”机制导致的，如果想继续操作，则需要关闭SIP2.1、查看SIP状态csrutil status\n2.2、关闭SIP2.2.1 重启MAC，按住cmd+R直到屏幕上出现苹果的标志和进度条，进入Recovery模式；2.2.2 在屏幕最上方的工具栏找到实用工具（左数第3个），打开终端，输入：csrutil disablecsrutil disable\n\n2.2.3 关掉终端，重启Mac；2.2.4 重启以后可以在终端中查看状态确认。至此，重新打开软件就不会再有报错提示了。\n2.3、 开启SIP（如果需要）与关闭的步骤相同，只是在步骤2.2.2中输入csrutil enable即可。\ncsrutil enable","slug":"mac/003-inode-client","date":"2022-05-07T14:20:13.000Z","categories_index":"Mac","tags_index":"iNode,H3C","author_index":"ilobos"},{"id":"8c87966f06e0f3dd0f743f345b41d695","title":"Parallels Desktop 17.1.1 提示【操作失败 执行该操作失败】的解决方案","content":"问题在激活Parallels Desktop 17.1.1之后，安装Win10（升级PD版本之后打开已安装的Win10）的过程中出现了【操作失败 执行该操作失败】的问题，本文尝试记录此情况以供有缘人查阅。\n\n  \n\n即便点击【解决方案】的链接也无济于事～（只会跳转官网，没有错误码，压根就不知道是哪个问题）\n\n  \n\n\n\n解决1、在控制中心选择【设置】\n  \n\n\n2、依次选择【硬件 -&gt; CPU与内存 -&gt; 高级】\n  \n\n\n3、切换虚拟机监控程序\n  \n\n\n4、选择Parallels\n  \n\n\n5、保存后重新操作即可正常安装或打开。\n","slug":"mac/002-parallels-desktop","date":"2022-05-07T14:20:13.000Z","categories_index":"Mac","tags_index":"ParallelsDesktop","author_index":"ilobos"},{"id":"3c2d263164cf1d9d91d8be662e750a9d","title":"vue/multi-word-component-names报错处理","content":"\n说明在使用命令安装electron-builder的时候, 老是碰到驼峰命名检查, 导致失败;\nvue add electron-builder\n\n  \n\n\n1、关闭驼峰命名在根目录文件 .eslintrc.js 中增加下列配置:\n&#x2F;&#x2F; 关闭驼峰命名规则\n&#39;vue&#x2F;multi-word-component-names&#39;: 0,\n\n2、如果没有, 则创建如果该文件不存在, 则需要在根目录下创建此文件, 内容如下:\nmodule.exports &#x3D; &#123;\n    root: true,\n    env: &#123;\n      node: true,\n    &#125;,\n    extends: [&#39;plugin:vue&#x2F;essential&#39;, &#39;eslint:recommended&#39;, &#39;plugin:prettier&#x2F;recommended&#39;],\n    parserOptions: &#123;\n      &#x2F;&#x2F; parser: &#39;@babel&#x2F;eslint-parser&#39;,\n    &#125;,\n    rules: &#123;\n      &#x2F;&#x2F; 去掉函数()前面的空格\n      &#39;space-before-function-paren&#39;: &#39;off&#39;,\n      &#39;no-console&#39;: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;,\n      &#39;no-debugger&#39;: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;,\n      &#x2F;&#x2F; 关闭驼峰命名规则\n      &#39;vue&#x2F;multi-word-component-names&#39;: 0,\n    &#125;,\n  &#125;\n\n","slug":"electron/005-el-multi-word-component-names","date":"2022-04-15T12:20:13.000Z","categories_index":"Electron","tags_index":"vue,multi-word-component-names","author_index":"ilobos"},{"id":"42c80a653f3e070ac8896b7d0d63d8ba","title":"ERR_ELECTRON_BUILDER_CANNOT_EXECUTE报错处理","content":"\n说明在使用命令执行electron:build构建的时候, 老是碰到ERR_ELECTRON_BUILDER_CANNOT_EXECUTE, 导致失败;\nnpm run electron:build\n\n1、注释对应配置在项目文件 background.js 将对应代码进行注释(一般在第5行):\nimport &#123; app, protocol, BrowserWindow &#125; from &#39;electron&#39;\nimport &#123; createProtocol &#125; from &#39;vue-cli-plugin-electron-builder&#x2F;lib&#39;\n&#x2F;&#x2F; import installExtension, &#123; VUEJS3_DEVTOOLS &#125; from &#39;electron-devtools-installer&#39;\nconst isDevelopment &#x3D; process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;","slug":"electron/006-el-build-error","date":"2022-04-15T12:20:13.000Z","categories_index":"Electron","tags_index":"vue,electron-devtools-installer","author_index":"ilobos"},{"id":"ea7229753d79611e87c6a6be3da79074","title":"vue项目中集成electron开发跨平台桌面应用","content":"\n说明本文将Vue引入Electron项目的方案是：Vue CLI Plugin Electron Builder，也有其他方式的，可自行谷歌。\n1、升级npm、cnpmcnpm install -g npm\nnpm install -g cnpm\n\n2、创建vue项目npm i @vue&#x2F;cli -g\nvue create [project-name]\n\n按照提示做出一些选择，然后就可以cd到项目路径下\n3、启动vue项目cd [project-name]\nnpm run serve\n\n4、安装Vue CLI Plugin Electron Buildervue add electron-builder\n\n如果Electron可能会安装失败，electron文件夹将是不完整的electron包，不能顺利打包运行，需要重新安装：\ncnpm i electron --S\n\n5、启动electron项目npm run electron:serve","slug":"electron/004-electron-vue","date":"2022-04-11T07:20:13.000Z","categories_index":"Electron","tags_index":"vue","author_index":"ilobos"},{"id":"5a84c1282747741be433f8b364c5c86f","title":"Mybatis Plus逻辑删除时自动填充时间","content":"\n1、背景开发规范里面要求有 delte_time 字段，但是baomidou的Mybatis plus里面没有这个字段；理论上也是不需要这个字段的，毕竟逻辑删除 与 update_time 配合起来就是 delte_time 的含义了；所以我们需要来研究一下 如何增加这个字段，并实现自动填充。\n2、开发环境java -version\njava version &quot;1.8.0_212&quot;\nJava(TM) SE Runtime Environment (build 1.8.0_212-b10)\nJava HotSpot(TM) 64-Bit Server VM (build 25.212-b10, mixed mode)\n&lt;dependency&gt;\n    &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.2.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.6.6&lt;&#x2F;version&gt;\n    &lt;relativePath&#x2F;&gt;\n&lt;&#x2F;parent&gt;\n\n3、通用字段1、SQL脚本：\n&#96;id&#96; bigint(32) unsigned NOT NULL AUTO_INCREMENT,\n&#96;create_time&#96; timestamp NULL DEFAULT NULL COMMENT &#39;创建时间&#39;,\n&#96;update_time&#96; timestamp NULL DEFAULT NULL COMMENT &#39;更新时间&#39;,\n&#96;delete_time&#96; timestamp NULL DEFAULT NULL COMMENT &#39;删除时间&#39;,\n&#96;is_deleted&#96; tinyint(4) unsigned NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;逻辑删除标识位&#39;,\n&#96;version&#96; int(11) unsigned NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;版本号&#39;,\n2、对应的BaseModel.java\n@TableId(value &#x3D; &quot;id&quot;, type &#x3D; IdType.AUTO)\nprotected Long id;\n\n@TableField(value &#x3D; &quot;create_time&quot;, fill &#x3D; FieldFill.INSERT)\nprotected Date createTime;\n\n@TableField(value &#x3D; &quot;update_time&quot;, fill &#x3D; FieldFill.UPDATE)\nprotected Date updateTime;\n\n@TableField(value &#x3D; &quot;delete_time&quot;)\nprotected Date deleteTime;\n\n@TableLogic\n@TableField(value &#x3D; &quot;is_deleted&quot;)\nprotected Integer isDeleted;\n\n@Version\n@TableField(value &#x3D; &quot;version&quot;, fill &#x3D; FieldFill.UPDATE, update &#x3D; &quot;%s+1&quot;)\nprotected Integer version;\n@TableId：主键字段\n@Version：版本号字段\n@TableLogic：逻辑删除字段\nFieldFill.UPDATE：当更新时填充\nFieldFill.INSERT：当插入时填充\n根据SQL脚本和BaseModel的相关字段，我们可以发现并没有对各个时间字段进行特殊处理，这里是有一个专门的【自动填充控制器】来操作的；\n4、自定义填充控制器@Configuration\npublic class MybatisPlusMetaObjectHandler implements MetaObjectHandler &#123;\n\n    @Override\n    public void insertFill(MetaObject metaObject) &#123;\n        Date now &#x3D; new Date();\n        &#x2F;&#x2F; 注意此处字段名称需要使用驼峰\n        Object createdAt &#x3D; this.getFieldValByName(&quot;createTime&quot;, metaObject);\n        if (null &#x3D;&#x3D; createdAt) &#123;\n            this.setFieldValByName(&quot;createTime&quot;, now, metaObject);\n        &#125;\n\n        Object updatedAt &#x3D; this.getFieldValByName(&quot;updateTime&quot;, metaObject);\n        if (null &#x3D;&#x3D; updatedAt) &#123;\n            this.setFieldValByName(&quot;updateTime&quot;, now, metaObject);\n        &#125;\n\n        Object version &#x3D; this.getFieldValByName(&quot;version&quot;, metaObject);\n        if (null &#x3D;&#x3D; version) &#123;\n            this.setFieldValByName(&quot;version&quot;, 0L, metaObject);\n        &#125;\n    &#125;\n\n    @Override\n    public void updateFill(MetaObject metaObject) &#123;\n\n        Object updatedAt &#x3D; this.getFieldValByName(&quot;updateTime&quot;, metaObject);\n        if (null &#x3D;&#x3D; updatedAt) &#123;\n            this.setFieldValByName(&quot;updateTime&quot;, new Date(), metaObject);\n        &#125;\n\n        Object version &#x3D; this.getFieldValByName(&quot;version&quot;, metaObject);\n        if (null &#x3D;&#x3D; version) &#123;\n            this.setFieldValByName(&quot;version&quot;, 0L, metaObject);\n        &#125;\n    &#125;\n&#125;\n到了这一步，逻辑删除时并不能对新增的 delete_time 字段设置当前的时间，还不符合我们的需求，所以我们需要改写一下SQL注入的逻辑；即：逻辑删除的时候，将 delete_time 设置为当前时间戳。\n5、自定义SQL注入器1、自定义逻辑删除，单个删除\npublic class LogicDeleteById extends AbstractMethod &#123;\n\n    &#x2F;**\n     * mapper 对应的方法名\n     *&#x2F;\n    private static final String MAPPER_METHOD &#x3D; &quot;logicDeleteById&quot;;\n\n    @Override\n    public MappedStatement injectMappedStatement(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo) &#123;\n        String sql;\n        SqlMethod sqlMethod &#x3D; SqlMethod.LOGIC_DELETE_BY_ID;\n        if (tableInfo.isLogicDelete()) &#123;\n            List&lt;TableFieldInfo&gt; fieldInfos &#x3D; tableInfo.getFieldList().stream()\n                    .filter(i -&gt; i.getFieldFill() &#x3D;&#x3D; FieldFill.UPDATE || i.getFieldFill() &#x3D;&#x3D; FieldFill.INSERT_UPDATE)\n                    .collect(toList());\n            if (CollectionUtils.isNotEmpty(fieldInfos)) &#123;\n                String sqlSet &#x3D; &quot;SET &quot; + fieldInfos.stream().map(i -&gt; i.getSqlSet(EMPTY)).collect(joining(EMPTY))\n                        + tableInfo.getLogicDeleteSql(false, true)\n                        + &quot;,delete_time &#x3D; NOW()&quot;;\n                sql &#x3D; String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlSet, tableInfo.getKeyColumn(),\n                        tableInfo.getKeyProperty(), tableInfo.getLogicDeleteSql(true, false));\n            &#125; else &#123;\n                sql &#x3D; String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlLogicSet(tableInfo),\n                        tableInfo.getKeyColumn(), tableInfo.getKeyProperty(),\n                        tableInfo.getLogicDeleteSql(true, false));\n            &#125;\n        &#125; else &#123;\n            sqlMethod &#x3D; SqlMethod.DELETE_BY_ID;\n            sql &#x3D; String.format(sqlMethod.getSql(), tableInfo.getTableName(), tableInfo.getKeyColumn(),\n                    tableInfo.getKeyProperty());\n        &#125;\n        SqlSource sqlSource &#x3D; languageDriver.createSqlSource(configuration, sql, modelClass);\n        return addUpdateMappedStatement(mapperClass, modelClass, MAPPER_METHOD, sqlSource);\n    &#125;\n&#125;\n2、自定义批量逻辑删除\npublic class LogicDeleteBatch extends AbstractMethod &#123;\n\n    &#x2F;**\n     * mapper 对应的方法名\n     *&#x2F;\n    private static final String MAPPER_METHOD &#x3D; &quot;logicDeleteBatch&quot;;\n\n    @Override\n    public MappedStatement injectMappedStatement(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo) &#123;\n        String sql;\n        if (tableInfo.isLogicDelete()) &#123;\n            String logicDeleteSql &#x3D; &quot;&lt;script&gt;\\nUPDATE %s %s %s\\n&lt;&#x2F;script&gt;&quot;;\n            List&lt;TableFieldInfo&gt; fieldInfos &#x3D; tableInfo.getFieldList().stream()\n                    .filter(i -&gt; i.getFieldFill() &#x3D;&#x3D; FieldFill.UPDATE || i.getFieldFill() &#x3D;&#x3D; FieldFill.INSERT_UPDATE)\n                    .collect(toList());\n            if (CollectionUtils.isNotEmpty(fieldInfos)) &#123;\n                String sqlSet &#x3D; &quot;SET &quot; + fieldInfos.stream().map(i -&gt; i.getSqlSet(ENTITY_DOT)).collect(joining(EMPTY))\n                        + tableInfo.getLogicDeleteSql(false, true)\n                        + &quot;,delete_time &#x3D; NOW()&quot;;\n                sql &#x3D; String.format(logicDeleteSql, tableInfo.getTableName(), sqlSet,\n                        sqlWhereEntityWrapper(true, tableInfo));\n            &#125; else &#123;\n                sql &#x3D; String.format(logicDeleteSql, tableInfo.getTableName(), sqlLogicSet(tableInfo),\n                        sqlWhereEntityWrapper(true, tableInfo));\n            &#125;\n            SqlSource sqlSource &#x3D; languageDriver.createSqlSource(configuration, sql, modelClass);\n            return this.addUpdateMappedStatement(mapperClass, modelClass, MAPPER_METHOD, sqlSource);\n        &#125; else &#123;\n            String deleteSql &#x3D; &quot;&lt;script&gt;\\nDELETE FROM %s %s\\n&lt;&#x2F;script&gt;&quot;;\n            sql &#x3D; String.format(deleteSql, tableInfo.getTableName(), sqlWhereEntityWrapper(true, tableInfo));\n            SqlSource sqlSource &#x3D; languageDriver.createSqlSource(configuration, sql, modelClass);\n            return this.addDeleteMappedStatement(mapperClass, MAPPER_METHOD, sqlSource);\n        &#125;\n    &#125;\n&#125;\n3、自定义SQL注入器\npublic class MybatisPlusSqlInjector extends DefaultSqlInjector &#123;\n\n    @Override\n    public List&lt;AbstractMethod&gt; getMethodList(Class&lt;?&gt; mapperClass) &#123;\n        &#x2F;&#x2F; 拿到父类的getMethodList方法\n        List&lt;AbstractMethod&gt; methodList &#x3D; super.getMethodList(mapperClass);\n\n        &#x2F;&#x2F; 根据id删除并自动填充 LogicDeleteById\n        methodList.add(new LogicDeleteById());\n\n        methodList.add(new LogicDeleteBatch());\n        return methodList;\n    &#125;\n&#125;\n4、在baseMapper里面声明这两个方法，使用过程中就可以直接在其他mapper中调用这两个自定义方法了：\npublic interface IBaseMapper&lt;T&gt; extends BaseMapper&lt;T&gt; &#123;\n    &#x2F;**\n     * 逻辑删除\n     *\n     * @param entity\n     * @return\n     *&#x2F;\n    int logicDeleteById(T entity);\n\n    &#x2F;**\n     * 批量逻辑删除\n     *\n     * @param entity\n     * @param wrapper\n     * @return\n     *&#x2F;\n    int logicDeleteBatch(@Param(Constants.ENTITY) T entity, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; wrapper);\n&#125;\n6、集成到service层1、接口\npublic interface IBaseService&lt;T&gt; extends IService&lt;T&gt; &#123;\n    &#x2F;**\n     * 逻辑删除\n     *\n     * @param entity\n     * @return\n     *&#x2F;\n    int logicDeleteById(T entity);\n\n    &#x2F;**\n     * 批量逻辑删除\n     *\n     * @param entity\n     * @param wrapper\n     * @return\n     *&#x2F;\n    int logicDeleteBatch(T entity, Wrapper&lt;T&gt; wrapper);\n&#125;\n2、实现类，记得要继承ServiceImpl&lt;M, T&gt;，不然要写很多相同的代码\nIBaseServiceImpl.javapublic class IBaseServiceImpl&lt;M extends IBaseMapper&lt;T&gt;, T&gt; extends ServiceImpl&lt;M, T&gt; implements IBaseService&lt;T&gt; &#123;\n\n    @Autowired\n    protected M baseMapper;\n\n    @Override\n    public M getBaseMapper() &#123;\n        return baseMapper;\n    &#125;\n\n    @Override\n    public int logicDeleteById(T entity) &#123;\n        return baseMapper.logicDeleteById(entity);\n    &#125;\n\n    @Override\n    public int logicDeleteBatch(T entity, Wrapper&lt;T&gt; wrapper) &#123;\n        return baseMapper.logicDeleteBatch(entity, wrapper);\n    &#125;\n\n&#125;\n3、至此，就可以在service层进行直接调用了，自从用了mybatis plus，就远离了mapper.xml\n\n","slug":"java/001-mybatis-plus-sql-injector","date":"2022-04-02T05:20:13.000Z","categories_index":"Java","tags_index":"Mybatis Plus,SQL","author_index":"ilobos"},{"id":"15d0f173b74c265bd5670b5b383beb4a","title":"Windows移除快捷方式的小图标","content":"\n1、打开注册表a、Windows图标 + R\nb、输入 regedit 打开注册表编辑程序\n\n2、删除IsShortcuta、依次展开 HKEY_CLASSES_ROOT\\lnkfile ， 也可以直接搜索\nb、找到并右键删除 IsShortcut\n\n3、重启资源管理器a、在任务栏右键，打开 任务管理器， 或使用快捷键 Ctrl + Shift + Esc\nb、依次打开 详细信息 -- 进程\nc、找到 Windows资源管理器，点击右下角的重新启动\n\n4、验收a、回到桌面发现快捷方式的图标已移除\n\n","slug":"win/001-remove-shortcut-flag","date":"2022-03-30T01:20:13.000Z","categories_index":"Windows","tags_index":"shortcut","author_index":"ilobos"},{"id":"a5099e91b4a393d0508ea9911bfe0b64","title":"安装nodejs","content":"\n说明想要使用Electron, 必须要有NodeJS的环境, 所以需要配置好项目环境\n1、下载&#x2F;升级 NodeJSNodeJS\n安装完成后, 检查版本号是否最最新:\nnode -v\n\n2、升级npmnpm install npm -g\nnpm -v\n\n3、安装cnpmnpm install cnpm -g\n\n4、切换npm镜像源npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org\n\nnpm config ls","slug":"electron/001-el-nodejs","date":"2022-03-23T12:20:13.000Z","categories_index":"Electron","tags_index":"NodeJS","author_index":"ilobos"},{"id":"edec85881b6b41afd343ca732029f4ed","title":"安装electron","content":"\n说明安装electron 和 electron-packager\n1、安装electroncnpm install electron -g\nelectron -v\n\n2、安装electron-packagercnpm install electron-packager -g\nelectron-packager --version","slug":"electron/002-el-electron","date":"2022-03-23T12:20:13.000Z","categories_index":"Electron","tags_index":"Electron","author_index":"ilobos"},{"id":"3b798228dd0740fc88b22588ebf2648f","title":"使用electron打包exe文件","content":"\n说明Windows首次使用electron-packager打包时耗时很长, 这是因为要下载最新版本的electron文件, 此时我们可以下载好zip文件, 然后通过命令指定, 从而绕过下载的过程\n1、下载资源文件从这里 下载对应的electron的文件\n将对应的文件下载到项目(或一个特定的位置)\n2、更换electron-packager打包命令electron-packager . --electron-zip-dir&#x3D;..&#x2F;\n\n3、其他参考这里\n","slug":"electron/003-el-electron-exe","date":"2022-03-23T12:20:13.000Z","categories_index":"Electron","tags_index":"exe,Windows,electron-package","author_index":"ilobos"},{"id":"b2874e3fc78ee955cf4b72b9338e5f63","title":"修改Azure的IP","content":"\n说明有些场景，我们需要变更Azure服务器的公共IP地址，这与阿里云、AWS的操作路径不一样，刚开始接触会比较迷糊，遂有此文。\n1、解绑原IP进入服务器所在的【资源组】，点击原IP地址，即可跳转至概述页面，如下图：\n\n  \n\n\n点击【取消关联】，按提示操作即可(上图IP已取消，不能再次点击)。\n2、创建新的IP在任意页面的上方搜索【公共IP地址】，进入下图页面：\n\n  \n\n\n点击【创建公共IP地址】，按页面提示操作即可，如下所示：\n\n  \n\n\n等待数秒，即可看到新IP已就绪：\n\n  \n\n\n3、绑定新IP从资源组点击新IP地址，进入概述页面，如下：\n\n  \n\n\n点击【关联】，在资源类型的地方选择【网络接口】，如下：\n\n  \n\n\n新IP就切换完成啦～\n","slug":"share/002-azure-change-ip","date":"2022-01-23T09:20:13.000Z","categories_index":"Azure","tags_index":"IP","author_index":"ilobos"},{"id":"9916183fe2709503372c397c5ea05887","title":"免费图源-无版权可商用素材站点","content":"\n\n\n\n\n\n\n温馨提示\n本分享仅供个人留档、学习使用，如需商用，使用前请留意对应网站的资源最新使用说明及限制，以免带来不必要的麻烦。\n\n说明在学习、开发过程中，或多或少会需要一些图片；在生活中，或多或少会需要一些高清壁纸，出于对版权的尊重，所以需要一些必要的免费资源，比如本文(本站)的博客封面图，大多来自这些站点，美观简洁、免费大方。\n站点1、PexelsPexels，支持中文搜索，可自由选择图片大小。\n2、PixabayPixabay，海量图源、音视频，且支持中文搜索。\n3、设计之家设计之家，这是一个神奇的网站，适合设计师。\n\n","slug":"share/001-free-pics","date":"2022-01-22T14:20:13.000Z","categories_index":"Design","tags_index":"Free Pics,Design","author_index":"ilobos"},{"id":"7598369c4bfa84f11ee7e6d55697a20e","title":"Aurora个性化配置说明","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hexo/006-hexo-aurora-plus","date":"2022-01-22T08:56:55.000Z","categories_index":"Hexo,Themes,Aurora","tags_index":"Hexo,Aurora","author_index":"ilobos"},{"id":"92d8b63f879f75e2d37b13751be9a4be","title":"Hexo安装Aurora主题","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hexo/005-hexo-aurora","date":"2022-01-22T08:53:55.000Z","categories_index":"Hexo,Themes,Aurora","tags_index":"Hexo,Aurora","author_index":"ilobos"},{"id":"54054c8771f81558e75a10064f187c10","title":"Hexo常用命令行","content":"本文讲述一下hexo的常用命令，相对比较简单。\n1、创建博客hexo new &#39;my-first-blog&#39;\n\n2、生成静态资源文件hexo generate\n或者\nhexo g\n\n3、部署到本地hexo server\n或者\nhexo s\n\n4、部署到远端hexo deploy\n或者\nhexo d\n\n5、清理静态资源文件hexo clean\n或者\nhexo cl\n\n6、组合命令更为常用6.1、部署本地修改了配置文件，再部署到本地，如果部署到远端则将s换成d\nhexo cl &amp; hexo s -g\n6.2、部署远端修改了配置文件，再部署到远端，如果部署到本地则将d换成s\nhexo d -g","slug":"hexo/004-hexo-cmd","date":"2022-01-21T08:53:55.000Z","categories_index":"Hexo","tags_index":"Hexo,常用命令","author_index":"ilobos"},{"id":"221ff9b73c33c8c7328587ca0c7f4edc","title":"Hexo更换主题(Themes)","content":"\n默认主题是比较丑的，如果有必要，可以尝试官网主题进行更换。\nclone主题找到喜欢的主题，先clone仓库代码，\ngit clone https:&#x2F;&#x2F;github.com&#x2F;chunqiuyiyu&#x2F;hexo-theme-polk themes&#x2F;polk\n执行完成后，会发现themes文件夹多了一个polk的主题文件夹。\n配置主题打开_config.yml文件，修改theme的配置\ntheme: polk\n\n发布主题因为修改了配置文件，则需要clean掉静态资源文件，进行重新生成；此处只演示本地，如果需要发布到远端，将s改成d即可。\nhexo cl &amp; hexo s -g\n","slug":"hexo/003-hexo-themes","date":"2022-01-21T07:38:47.000Z","categories_index":"Hexo,Themes","tags_index":"Hexo,Themes","author_index":"ilobos"},{"id":"238c46f5783213064039b25b694d590e","title":"使用GitHub Pages搭建个人博客","content":"\n\n\n\n\n\n\n温馨提示\n本方案需要搭配Hexo使用，请确保已正确安装Hexo。\n\nGitHub支持创建1、个人&#x2F;组织，2、已有项目这两种类型的网站。1、想要直接 username.github.io 来访问自己的个人博客，那就需要用到GitHub Pages的服务，对比Gitee则无需进行身份认证，值得说明的是，Gitee需要身份证正反面和手持，介意的话直接使用GitHub Pages的服务即可。2、想要对已有项目进行建站，直接打开Pages的设置即可。\n一、个人&#x2F;组织 建站创建空仓库创建一个名为 username.github.io 的空仓库(其中username为GitHub的用户名)，该仓库名称敏感即必须保持一致，另外该仓库必须为Public，才能进行有效访问。\n借助【hexo】制作Pages1、将代码克隆到本地，并将【.git】目录暂时移出；\n\n\n\n\n\n\n提示\n此处如果不移出，hexo初始化时会报错，提示当前文件夹为非空。\n\n2、cd到项目里，执行命令初始化项目\nhexo init\n\n\n\n\n\n\n提示\n在项目中执行初始化，对应的配置文件也会在该目录下，方便后续配置其他主题。\n\n3、将【.git】目录移回项目\n4、执行命令部署Pages @本地\nhexo s -g\n\n\n\n\n\n\n本地访问\n1、执行该命令后，hexo会自动创建public的目录，里面保存了html等静态文件，方便后续发布到Github；2、hexo s -g，也可以分成 hexo g #生成代码 和 hexo s #运行服务 两次执行；3、在浏览器输入localhost:4000或点击命令行中的链接直接跳转即可访问到博客主页。\n\n5、部署到Github前的配置当第4步中，本地觉得满意后，则需要打开_config.yml文件，修改部署的deploy配置：\ndeploy:\n  type: git\n  repository: git@github.com:xxx&#x2F;xxx.github.git\n  branch: master\n如果有多个仓库的需求，则需要改成：\ndeploy:\n  type: git\n  repo: \n      github: git@github.com:xxx&#x2F;xxx.github.io.git\n      gitee: https:&#x2F;&#x2F;gitee.com&#x2F;xxx&#x2F;xxx.git\n  branch: master\n\n\n\n\n\n\n提示\n请根据实际情况选择 https 或者 ssh 的仓库地址\n\n6、安装部署插件\n\n\n\n\n\n\n\nDanger\n如果使用hexo d出现如下错误，需执行以下命令安装插件Deployer not found: gitee 或者 Deployer not found: git\n\nnpm install hexo-deployer-git --save\n\n7、执行命令部署Pages @Github\nhexo cl &amp; hexo d -g\n\n\n\n\n\n\nGithub访问\n在浏览器输入 username.github.io 即可访问到博客主页；如果提示404，等待一段时间，待github刷新CDN即可正常访问。\n\n8、创建、修改博客\nhexo new &#39;my-first-blog&#39;\n会在你的博客文件夹生成，source&#x2F;_posts&#x2F;my-first-blog.md 文件，sublime、vscode、Typora等均可修改md文件\n9、发布博客\n本地：\nhexo s -g\n\n远端：\nhexo d -g\n\n\n二、已有项目 建站1、进入已有项目，依次点击【Settings】–&gt;【Pages】，如下图：\n\n  \n\n\n2、在右侧的【Source】选择对应的分支，点击【Save】\n3、最后，在仓库中创建一个index.html然后push就可以啦～\n","slug":"hexo/002-github-pages","date":"2022-01-19T13:20:13.000Z","categories_index":"Hexo,个人博客","tags_index":"GitHub Pages,Blog","author_index":"ilobos"},{"id":"dd134f0a0b193c4f4de61551c33c84e5","title":"Hexo安装说明","content":"为了建立个人博客网站，使用 username.github.io 进行访问，本文将介绍 使用Hexo 这款简单、快速、强大的开源方案在Mac环境下进行建站、发布博客。 \n全局安装使用npm、homebrew命令皆可\nnpm install -g hexo\n\n如果没有nodejs，则需要先安装\nbrew install node\n\n\n\n\n\n\n提示\n安装完成后不要执行其他命令，主要是为了后续的博客项目配置更加简单。\n\n","slug":"hexo/001-hexo-install","date":"2022-01-18T08:53:55.000Z","categories_index":"Hexo,个人博客","tags_index":"Hexo,Mac","author_index":"ilobos"},{"id":"150afb2e14cbc5dc7ea2d3f01d83d0cc","title":"Mac设置别名","content":"\n1、查看别名alias\n\n2、编辑.bash_profile文件vim ~&#x2F;.bash_profile\n\n3、添加别名语法：alias [别名]&#x3D;’[指令]’说明：&#x3D;等号两端无空格、指令两端有单引号举例：test\nalias test&#x3D;&#39;cd &#x2F;Users&#x2F;xxx&#x2F;develop&#x2F;test;&#39;\n\n4、生效source ~&#x2F;.bash_profile\n\n","slug":"mac/001-alias","date":"2021-12-22T14:20:13.000Z","categories_index":"Mac","tags_index":"CMD,Alias","author_index":"ilobos"}]